// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PulsePitch.Data;

#nullable disable

namespace PulsePitchBackend.Migrations
{
    [DbContext(typeof(PulsePitchDbContext))]
    [Migration("20250626170202_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "cb1c88d2-f3be-4c6b-b31f-a5f3e39e274f",
                            Name = "Player",
                            NormalizedName = "PLAYER"
                        },
                        new
                        {
                            Id = "e9b4c5a4-76c6-44b7-88fb-35a0228c9572",
                            Name = "Coach",
                            NormalizedName = "COACH"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e11c8c07-ddcb-4438-a829-74f1c142652b",
                            Email = "admina@strator.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEL6yqHX+Qk2DRcWomyT21t9v9HhV/7kNZpT3D7q+TFQh0RmbNi3RO898eYIasxLXUQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "98042dc5-2ebf-4ed6-85f7-6b7558c1f79d",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "d8d76512-74f1-43bb-b1fd-87d3a8aa36df",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "24f387d9-3112-4d81-976d-1ddc3d1a7d91",
                            Email = "john@doe.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEOvLIqc5Yqn2o4NEp3MjOAAIAlVoLhe53/l2TVLZ21E5WVB46O8O7EotivcIlGYUFw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a8f6d1fa-77af-4c2b-9af0-fef779934b92",
                            TwoFactorEnabled = false,
                            UserName = "JohnDoe"
                        },
                        new
                        {
                            Id = "a7d21fac-3b21-454a-a747-075f072d0cf3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6751ec2f-10ab-421b-a115-5ee29c838b0f",
                            Email = "jane@smith.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEBfqDLoqxPYvcdNKIABUWYIs6CvgKCJMdpCAKDJ49f46OwpV8sFyEafAX0WlnHlZ2A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a3bda271-6856-4d8a-99bb-9dd2f76315fe",
                            TwoFactorEnabled = false,
                            UserName = "JaneSmith"
                        },
                        new
                        {
                            Id = "c806cfae-bda9-47c5-8473-dd52fd056a9b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6ed7c422-72d9-48d1-8854-c1594a0d40e9",
                            Email = "alice@johnson.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEDRQ/eGSYvHJztb6eMVogTvWORevocHhFjIRK9jXqBKTfaN+OIl2Wv1mI/vTmxxcOQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "47f7fe99-52c2-4122-8d6e-c8d222457bcc",
                            TwoFactorEnabled = false,
                            UserName = "AliceJohnson"
                        },
                        new
                        {
                            Id = "9ce89d88-75da-4a80-9b0d-3fe58582b8e2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8b11e1e-d4b0-4bbd-9f02-bf6b4e9ecb46",
                            Email = "bob@williams.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAECUKA8I6gURLnCyYWaxzJZ22V63u93k5cARgl7dhPidyYXMwmexF1Qj6wi7ZBrDroA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e1742dfd-1622-440c-bd63-7dcd1fbc2dc5",
                            TwoFactorEnabled = false,
                            UserName = "BobWilliams"
                        },
                        new
                        {
                            Id = "d224a03d-bf0c-4a05-b728-e3521e45d74d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8b714d5f-70c6-46c8-9ee0-48906806bc11",
                            Email = "Eve@Davis.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEGLVxQMkrx87IyjdJnsxJZCHLiztvv9qhuvaM53J+jaq5nVi0A5Qt52tY4lOZDtc2g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "638d4cdc-2c76-4315-905f-2785168766d5",
                            TwoFactorEnabled = false,
                            UserName = "EveDavis"
                        },
                        new
                        {
                            Id = "e5c98b1e-5b93-4a7a-9b5a-7a9f9b7b9b7b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1b5631a4-2933-486e-98ab-77e6721f85d0",
                            Email = "david@brown.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEEJBNMUARgaXc4SNmOFiJRbGX1cXCxPISfx5KjC8lJNwozTvRmxHIF58vpo9uhd7hA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c37e80eb-aea3-4ce3-9149-225439091b23",
                            TwoFactorEnabled = false,
                            UserName = "DavidBrown"
                        },
                        new
                        {
                            Id = "f6d87a2d-6c84-4b8f-a9e3-8e7a6f5b4c3d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3f4c6dc2-272e-4409-a10d-6d04e6062c3b",
                            Email = "olivia@taylor.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEPfTygfYjlG818vLnm9BgEp0/MYny8IdBqRV7P52QuPc9p/m85CmN8Xnon0wf2dgOA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f9263624-d831-4fd7-ba74-abf2e59beeed",
                            TwoFactorEnabled = false,
                            UserName = "OliviaTaylor"
                        },
                        new
                        {
                            Id = "g7e96c3e-7d95-4c9a-b0f4-9c8b7a5d3e2f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fcc79ea9-f07e-4f42-ab32-984ebf06a407",
                            Email = "james@wilson.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAELPQGsP1ANf1UmJkFOoE2RvYItyqslHE0wutus5JpmMa+i4+rEqaIvtTti40tTsXLg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d06c4721-47bd-42e0-9181-80a03ffad7bd",
                            TwoFactorEnabled = false,
                            UserName = "JamesWilson"
                        },
                        new
                        {
                            Id = "h8f05d4f-8e06-4d0b-a105-ad9c6b4e4d1a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bee9a196-420f-4878-8ebe-e55aeaf2adb2",
                            Email = "sophia@moore.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEMiJ4+k0iAv+h2Mqz6HzaP/Xs7vQLQjvcyIaw8ZP/JchQIE9IX9wGSm9qbwvCPCT5Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "96ec924e-14d9-42b4-bca3-60a2e8595d86",
                            TwoFactorEnabled = false,
                            UserName = "SophiaMoore"
                        },
                        new
                        {
                            Id = "i9g14e5g-9f17-4e1c-b216-be8d5a3c2b0b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ceb0aac6-4d7d-437f-a486-2ccb26854f4a",
                            Email = "william@anderson.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEKRBj8BV9in2Xe37WN5qunsbCRaRS64T8LsBBW/ietf1RDtjzL138+B+FDHBjS2W4w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b2412cf8-40d8-4bb8-9d7b-1882a72c39bc",
                            TwoFactorEnabled = false,
                            UserName = "WilliamAnderson"
                        },
                        new
                        {
                            Id = "j0h23f6h-0a28-4f2d-b327-cf9e4b2d1c0c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e345dcc4-6f04-4c52-b60e-a680cfa002c2",
                            Email = "mia@thomas.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAELlF5KA0lzNgUr2wNPGmNd5LuWQmM1HT16aVABlE7CtbtyVYbZqdCIVZqLGwOJdLUw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9c80a07d-39c8-4fd4-b009-ebd043465eb3",
                            TwoFactorEnabled = false,
                            UserName = "MiaThomas"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "e9b4c5a4-76c6-44b7-88fb-35a0228c9572"
                        },
                        new
                        {
                            UserId = "d8d76512-74f1-43bb-b1fd-87d3a8aa36df",
                            RoleId = "cb1c88d2-f3be-4c6b-b31f-a5f3e39e274f"
                        },
                        new
                        {
                            UserId = "a7d21fac-3b21-454a-a747-075f072d0cf3",
                            RoleId = "cb1c88d2-f3be-4c6b-b31f-a5f3e39e274f"
                        },
                        new
                        {
                            UserId = "e5c98b1e-5b93-4a7a-9b5a-7a9f9b7b9b7b",
                            RoleId = "cb1c88d2-f3be-4c6b-b31f-a5f3e39e274f"
                        },
                        new
                        {
                            UserId = "f6d87a2d-6c84-4b8f-a9e3-8e7a6f5b4c3d",
                            RoleId = "cb1c88d2-f3be-4c6b-b31f-a5f3e39e274f"
                        },
                        new
                        {
                            UserId = "g7e96c3e-7d95-4c9a-b0f4-9c8b7a5d3e2f",
                            RoleId = "cb1c88d2-f3be-4c6b-b31f-a5f3e39e274f"
                        },
                        new
                        {
                            UserId = "h8f05d4f-8e06-4d0b-a105-ad9c6b4e4d1a",
                            RoleId = "cb1c88d2-f3be-4c6b-b31f-a5f3e39e274f"
                        },
                        new
                        {
                            UserId = "i9g14e5g-9f17-4e1c-b216-be8d5a3c2b0b",
                            RoleId = "cb1c88d2-f3be-4c6b-b31f-a5f3e39e274f"
                        },
                        new
                        {
                            UserId = "j0h23f6h-0a28-4f2d-b327-cf9e4b2d1c0c",
                            RoleId = "cb1c88d2-f3be-4c6b-b31f-a5f3e39e274f"
                        },
                        new
                        {
                            UserId = "c806cfae-bda9-47c5-8473-dd52fd056a9b",
                            RoleId = "cb1c88d2-f3be-4c6b-b31f-a5f3e39e274f"
                        },
                        new
                        {
                            UserId = "9ce89d88-75da-4a80-9b0d-3fe58582b8e2",
                            RoleId = "cb1c88d2-f3be-4c6b-b31f-a5f3e39e274f"
                        },
                        new
                        {
                            UserId = "d224a03d-bf0c-4a05-b728-e3521e45d74d",
                            RoleId = "cb1c88d2-f3be-4c6b-b31f-a5f3e39e274f"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PulsePitch.Models.ChatRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("UserOneId")
                        .HasColumnType("integer");

                    b.Property<int>("UserTwoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserOneId");

                    b.HasIndex("UserTwoId");

                    b.ToTable("ChatRoom");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserOneId = 1,
                            UserTwoId = 2
                        },
                        new
                        {
                            Id = 2,
                            UserOneId = 3,
                            UserTwoId = 4
                        },
                        new
                        {
                            Id = 3,
                            UserOneId = 5,
                            UserTwoId = 6
                        });
                });

            modelBuilder.Entity("PulsePitch.Models.Events", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Practice"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Film"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Meeting"
                        });
                });

            modelBuilder.Entity("PulsePitch.Models.Formations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Formations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A standard 4-3-3 attacking formation",
                            Name = "4-3-3 Default",
                            TeamId = 1
                        });
                });

            modelBuilder.Entity("PulsePitch.Models.MatchRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AwayTeamId")
                        .HasColumnType("integer");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<DateTime>("ProposedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RecieverId")
                        .HasColumnType("integer");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("HomeTeamId");

                    b.ToTable("MatchRequest");
                });

            modelBuilder.Entity("PulsePitch.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChatRoomId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("integer");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ChatRoomId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChatRoomId = 1,
                            Content = "Hey there!",
                            ReceiverId = 2,
                            SenderId = 1,
                            SentAt = new DateTime(2025, 6, 26, 17, 2, 1, 679, DateTimeKind.Utc).AddTicks(7231)
                        },
                        new
                        {
                            Id = 2,
                            ChatRoomId = 1,
                            Content = "Hey! Ready for practice?",
                            ReceiverId = 1,
                            SenderId = 2,
                            SentAt = new DateTime(2025, 6, 26, 17, 3, 1, 679, DateTimeKind.Utc).AddTicks(7232)
                        },
                        new
                        {
                            Id = 3,
                            ChatRoomId = 2,
                            Content = "Coach, what time is the game?",
                            ReceiverId = 4,
                            SenderId = 3,
                            SentAt = new DateTime(2025, 6, 26, 17, 2, 1, 679, DateTimeKind.Utc).AddTicks(7239)
                        },
                        new
                        {
                            Id = 4,
                            ChatRoomId = 2,
                            Content = "6 PM sharp. Be there early.",
                            ReceiverId = 3,
                            SenderId = 4,
                            SentAt = new DateTime(2025, 6, 26, 17, 4, 1, 679, DateTimeKind.Utc).AddTicks(7240)
                        },
                        new
                        {
                            Id = 5,
                            ChatRoomId = 3,
                            Content = "New message!",
                            ReceiverId = 6,
                            SenderId = 5,
                            SentAt = new DateTime(2025, 6, 26, 17, 2, 1, 679, DateTimeKind.Utc).AddTicks(7241)
                        });
                });

            modelBuilder.Entity("PulsePitch.Models.PlayerTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("PlayerTeams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PlayerId = 1,
                            TeamId = 1
                        },
                        new
                        {
                            Id = 2,
                            PlayerId = 2,
                            TeamId = 6
                        },
                        new
                        {
                            Id = 4,
                            PlayerId = 3,
                            TeamId = 4
                        },
                        new
                        {
                            Id = 5,
                            PlayerId = 4,
                            TeamId = 3
                        },
                        new
                        {
                            Id = 6,
                            PlayerId = 5,
                            TeamId = 4
                        },
                        new
                        {
                            Id = 7,
                            PlayerId = 5,
                            TeamId = 6
                        },
                        new
                        {
                            Id = 8,
                            PlayerId = 6,
                            TeamId = 5
                        },
                        new
                        {
                            Id = 9,
                            PlayerId = 7,
                            TeamId = 7
                        },
                        new
                        {
                            Id = 10,
                            PlayerId = 8,
                            TeamId = 8
                        },
                        new
                        {
                            Id = 11,
                            PlayerId = 9,
                            TeamId = 9
                        },
                        new
                        {
                            Id = 12,
                            PlayerId = 10,
                            TeamId = 10
                        },
                        new
                        {
                            Id = 14,
                            PlayerId = 2,
                            TeamId = 2
                        },
                        new
                        {
                            Id = 16,
                            PlayerId = 3,
                            TeamId = 5
                        },
                        new
                        {
                            Id = 17,
                            PlayerId = 3,
                            TeamId = 6
                        });
                });

            modelBuilder.Entity("PulsePitch.Models.PlayersInFormation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<int>("FormationId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("PositionId")
                        .HasColumnType("integer");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<double>("X")
                        .HasColumnType("double precision");

                    b.Property<double>("Y")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("FormationId");

                    b.ToTable("PlayersInFormation");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FormationId = 1,
                            Note = "Player 1",
                            PositionId = 1,
                            X = 920.0,
                            Y = 344.0
                        },
                        new
                        {
                            Id = 2,
                            FormationId = 1,
                            Note = "Player 2",
                            PositionId = 2,
                            X = 800.0,
                            Y = 122.0
                        },
                        new
                        {
                            Id = 3,
                            FormationId = 1,
                            Note = "Player 3",
                            PositionId = 3,
                            X = 800.0,
                            Y = 200.0
                        },
                        new
                        {
                            Id = 4,
                            FormationId = 1,
                            Note = "Player 4",
                            PositionId = 4,
                            X = 800.0,
                            Y = 433.0
                        },
                        new
                        {
                            Id = 5,
                            FormationId = 1,
                            Note = "Player 5",
                            PositionId = 5,
                            X = 800.0,
                            Y = 511.0
                        },
                        new
                        {
                            Id = 6,
                            FormationId = 1,
                            Note = "Player 6",
                            PositionId = 6,
                            X = 400.0,
                            Y = 316.0
                        },
                        new
                        {
                            Id = 7,
                            FormationId = 1,
                            Note = "Player 7",
                            PositionId = 7,
                            X = 600.0,
                            Y = 161.0
                        },
                        new
                        {
                            Id = 8,
                            FormationId = 1,
                            Note = "Player 8",
                            PositionId = 8,
                            X = 600.0,
                            Y = 472.0
                        },
                        new
                        {
                            Id = 9,
                            FormationId = 1,
                            Note = "Player 9",
                            PositionId = 9,
                            X = 400.0,
                            Y = 83.0
                        },
                        new
                        {
                            Id = 10,
                            FormationId = 1,
                            Note = "Player 10",
                            PositionId = 10,
                            X = 350.0,
                            Y = 316.0
                        },
                        new
                        {
                            Id = 11,
                            FormationId = 1,
                            Note = "Player 11",
                            PositionId = 11,
                            X = 400.0,
                            Y = 650.0
                        },
                        new
                        {
                            Id = 12,
                            FormationId = 1,
                            Note = "Player 1",
                            PositionId = 12,
                            X = 65.0,
                            Y = 350.0
                        },
                        new
                        {
                            Id = 13,
                            FormationId = 1,
                            Note = "Player 2",
                            PositionId = 13,
                            X = 200.0,
                            Y = 511.0
                        },
                        new
                        {
                            Id = 14,
                            FormationId = 1,
                            Note = "Player 3",
                            PositionId = 14,
                            X = 200.0,
                            Y = 433.0
                        },
                        new
                        {
                            Id = 15,
                            FormationId = 1,
                            Note = "Player 4",
                            PositionId = 15,
                            X = 200.0,
                            Y = 300.0
                        },
                        new
                        {
                            Id = 16,
                            FormationId = 1,
                            Note = "Player 5",
                            PositionId = 16,
                            X = 200.0,
                            Y = 122.0
                        },
                        new
                        {
                            Id = 17,
                            FormationId = 1,
                            Note = "Player 6",
                            PositionId = 17,
                            X = 300.0,
                            Y = 316.0
                        },
                        new
                        {
                            Id = 18,
                            FormationId = 1,
                            Note = "Player 7",
                            PositionId = 18,
                            X = 400.0,
                            Y = 472.0
                        },
                        new
                        {
                            Id = 19,
                            FormationId = 1,
                            Note = "Player 8",
                            PositionId = 19,
                            X = 400.0,
                            Y = 161.0
                        },
                        new
                        {
                            Id = 20,
                            FormationId = 1,
                            Note = "Player 9",
                            PositionId = 20,
                            X = 600.0,
                            Y = 550.0
                        },
                        new
                        {
                            Id = 21,
                            FormationId = 1,
                            Note = "Player 10",
                            PositionId = 21,
                            X = 650.0,
                            Y = 316.0
                        },
                        new
                        {
                            Id = 22,
                            FormationId = 1,
                            Note = "Player 11",
                            PositionId = 22,
                            X = 600.0,
                            Y = 183.0
                        });
                });

            modelBuilder.Entity("PulsePitch.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CoachId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("JoinCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CoachId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            JoinCode = "EGL123",
                            Name = "Eagles"
                        },
                        new
                        {
                            Id = 2,
                            CoachId = "d8d76512-74f1-43bb-b1fd-87d3a8aa36df",
                            JoinCode = "FLC123",
                            Name = "Falcons"
                        },
                        new
                        {
                            Id = 3,
                            CoachId = "a7d21fac-3b21-454a-a747-075f072d0cf3",
                            JoinCode = "WLV456",
                            Name = "Wolves"
                        },
                        new
                        {
                            Id = 4,
                            CoachId = "a7d21fac-3b21-454a-a747-075f072d0cf3",
                            JoinCode = "SHK789",
                            Name = "Sharks"
                        },
                        new
                        {
                            Id = 5,
                            CoachId = "a7d21fac-3b21-454a-a747-075f072d0cf3",
                            JoinCode = "TTN321",
                            Name = "Titans"
                        },
                        new
                        {
                            Id = 6,
                            CoachId = "a7d21fac-3b21-454a-a747-075f072d0cf3",
                            JoinCode = "PNR654",
                            Name = "Panthers"
                        },
                        new
                        {
                            Id = 7,
                            CoachId = "e5c98b1e-5b93-4a7a-9b5a-7a9f9b7b9b7b",
                            JoinCode = "WAR789",
                            Name = "Warriors"
                        },
                        new
                        {
                            Id = 8,
                            CoachId = "f6d87a2d-6c84-4b8f-a9e3-8e7a6f5b4c3d",
                            JoinCode = "ROY321",
                            Name = "Royals"
                        },
                        new
                        {
                            Id = 9,
                            CoachId = "g7e96c3e-7d95-4c9a-b0f4-9c8b7a5d3e2f",
                            JoinCode = "STR654",
                            Name = "Stars"
                        },
                        new
                        {
                            Id = 10,
                            CoachId = "h8f05d4f-8e06-4d0b-a105-ad9c6b4e4d1a",
                            JoinCode = "RNG987",
                            Name = "Rangers"
                        });
                });

            modelBuilder.Entity("PulsePitch.Models.TeamEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamEvents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Morning practice session",
                            End = new DateTime(2025, 6, 6, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 1,
                            Start = new DateTime(2025, 6, 6, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 1,
                            Title = "Practice"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Afternoon film",
                            End = new DateTime(2025, 6, 10, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 2,
                            Start = new DateTime(2025, 6, 10, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 2,
                            Title = "film"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Early morning drills",
                            End = new DateTime(2025, 6, 5, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 1,
                            Start = new DateTime(2025, 6, 5, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 3,
                            Title = "Practice"
                        },
                        new
                        {
                            Id = 4,
                            Description = "team meeting",
                            End = new DateTime(2025, 6, 8, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 3,
                            Start = new DateTime(2025, 6, 8, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 4,
                            Title = "meeting"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Tactical strategy session",
                            End = new DateTime(2025, 6, 9, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 2,
                            Start = new DateTime(2025, 6, 9, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 5,
                            Title = "film"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Shooting practice",
                            End = new DateTime(2025, 6, 4, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 1,
                            Start = new DateTime(2025, 6, 4, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 6,
                            Title = "Practice"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Ball control and drills",
                            End = new DateTime(2025, 6, 3, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 1,
                            Start = new DateTime(2025, 6, 3, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 1,
                            Title = "Practice"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Defensive coordination",
                            End = new DateTime(2025, 6, 11, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 3,
                            Start = new DateTime(2025, 6, 11, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 2,
                            Title = "meeting"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Midfield passing accuracy",
                            End = new DateTime(2025, 6, 7, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 1,
                            Start = new DateTime(2025, 6, 7, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 3,
                            Title = "Practice"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Set-piece rehearsals",
                            End = new DateTime(2025, 6, 6, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 2,
                            Start = new DateTime(2025, 6, 6, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 4,
                            Title = "film"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Evening conditioning session",
                            End = new DateTime(2025, 6, 12, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 1,
                            Start = new DateTime(2025, 6, 12, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 5,
                            Title = "Practice"
                        },
                        new
                        {
                            Id = 12,
                            Description = "practice Championship Game",
                            End = new DateTime(2025, 6, 13, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 1,
                            Start = new DateTime(2025, 6, 13, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 6,
                            Title = "practice"
                        },
                        new
                        {
                            Id = 13,
                            Description = "State Tournament prep",
                            End = new DateTime(2025, 6, 15, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 2,
                            Start = new DateTime(2025, 6, 14, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 7,
                            Title = "Tournament"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Morning practice session",
                            End = new DateTime(2025, 7, 1, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 1,
                            Start = new DateTime(2025, 7, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 8,
                            Title = "Practice"
                        },
                        new
                        {
                            Id = 17,
                            Description = "Morning practice session",
                            End = new DateTime(2025, 7, 3, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 1,
                            Start = new DateTime(2025, 7, 3, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 1,
                            Title = "Practice"
                        },
                        new
                        {
                            Id = 18,
                            Description = "Afternoon film",
                            End = new DateTime(2025, 7, 4, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 2,
                            Start = new DateTime(2025, 7, 4, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 2,
                            Title = "film"
                        },
                        new
                        {
                            Id = 19,
                            Description = "Early morning drills",
                            End = new DateTime(2025, 7, 6, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 1,
                            Start = new DateTime(2025, 7, 6, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 3,
                            Title = "Practice"
                        },
                        new
                        {
                            Id = 20,
                            Description = "team meeting",
                            End = new DateTime(2025, 7, 7, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 3,
                            Start = new DateTime(2025, 7, 7, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 4,
                            Title = "meeting"
                        });
                });

            modelBuilder.Entity("PulsePitch.Models.TeamGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AwayTeamId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("integer");

                    b.Property<bool>("OnCalendar")
                        .HasColumnType("boolean");

                    b.Property<string>("Result")
                        .HasColumnType("text");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("HomeTeamId");

                    b.ToTable("TeamGames");

                    b.HasData(
                        new
                        {
                            Id = 19,
                            AwayTeamId = 4,
                            End = new DateTime(2025, 6, 10, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 1,
                            OnCalendar = true,
                            Result = "TBD",
                            Start = new DateTime(2025, 6, 10, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 18,
                            AwayTeamId = 2,
                            End = new DateTime(2025, 6, 10, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 1,
                            OnCalendar = true,
                            Result = "2-1",
                            Start = new DateTime(2025, 6, 10, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 17,
                            AwayTeamId = 5,
                            End = new DateTime(2025, 6, 23, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 2,
                            OnCalendar = true,
                            Result = "3-2",
                            Start = new DateTime(2025, 6, 23, 19, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 16,
                            AwayTeamId = 3,
                            End = new DateTime(2025, 6, 24, 21, 30, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 6,
                            OnCalendar = true,
                            Result = "1-0",
                            Start = new DateTime(2025, 6, 24, 20, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 1,
                            AwayTeamId = 1,
                            End = new DateTime(2025, 6, 25, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 4,
                            OnCalendar = true,
                            Result = "2-2",
                            Start = new DateTime(2025, 6, 25, 17, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AwayTeamId = 4,
                            End = new DateTime(2025, 6, 12, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 3,
                            OnCalendar = true,
                            Result = "0-0",
                            Start = new DateTime(2025, 6, 12, 17, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            AwayTeamId = 6,
                            End = new DateTime(2025, 6, 14, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 5,
                            OnCalendar = true,
                            Result = "1-3",
                            Start = new DateTime(2025, 6, 14, 20, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            AwayTeamId = 8,
                            End = new DateTime(2025, 6, 15, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 2,
                            OnCalendar = true,
                            Result = "4-2",
                            Start = new DateTime(2025, 6, 15, 19, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            AwayTeamId = 1,
                            End = new DateTime(2025, 6, 17, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 6,
                            OnCalendar = true,
                            Result = "1-1",
                            Start = new DateTime(2025, 6, 17, 16, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            AwayTeamId = 5,
                            End = new DateTime(2025, 6, 18, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 3,
                            OnCalendar = true,
                            Result = "0-2",
                            Start = new DateTime(2025, 6, 18, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            AwayTeamId = 1,
                            End = new DateTime(2025, 6, 22, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 7,
                            OnCalendar = true,
                            Result = "3-3",
                            Start = new DateTime(2025, 6, 22, 18, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            AwayTeamId = 5,
                            End = new DateTime(2025, 6, 29, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 2,
                            OnCalendar = true,
                            Result = "1-0",
                            Start = new DateTime(2025, 6, 29, 17, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            AwayTeamId = 3,
                            End = new DateTime(2025, 6, 28, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 6,
                            OnCalendar = true,
                            Result = "2-2",
                            Start = new DateTime(2025, 6, 28, 20, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            AwayTeamId = 2,
                            End = new DateTime(2025, 6, 25, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 5,
                            OnCalendar = true,
                            Result = "3-1",
                            Start = new DateTime(2025, 6, 25, 19, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            AwayTeamId = 7,
                            End = new DateTime(2025, 7, 2, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 1,
                            OnCalendar = true,
                            Result = "TBD",
                            Start = new DateTime(2025, 7, 2, 19, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            AwayTeamId = 3,
                            End = new DateTime(2025, 7, 5, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 6,
                            OnCalendar = true,
                            Result = "TBD",
                            Start = new DateTime(2025, 7, 5, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14,
                            AwayTeamId = 4,
                            End = new DateTime(2025, 7, 8, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 2,
                            OnCalendar = true,
                            Result = "TBD",
                            Start = new DateTime(2025, 7, 8, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 15,
                            AwayTeamId = 9,
                            End = new DateTime(2025, 7, 9, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 5,
                            OnCalendar = true,
                            Result = "TBD",
                            Start = new DateTime(2025, 7, 9, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("PulsePitch.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("IdentityUserId")
                        .HasColumnType("text");

                    b.Property<string>("ImageLocation")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<List<string>>("Roles")
                        .HasColumnType("text[]");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDateTime = new DateTime(2022, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Admina",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            ImageLocation = "https://robohash.org/numquamutut.png?size=150x150&set=set1",
                            LastName = "Strator"
                        },
                        new
                        {
                            Id = 2,
                            CreateDateTime = new DateTime(2023, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "John",
                            IdentityUserId = "d8d76512-74f1-43bb-b1fd-87d3a8aa36df",
                            ImageLocation = "https://robohash.org/nisiautemet.png?size=150x150&set=set1",
                            LastName = "Doe"
                        },
                        new
                        {
                            Id = 3,
                            CreateDateTime = new DateTime(2022, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Jane",
                            IdentityUserId = "a7d21fac-3b21-454a-a747-075f072d0cf3",
                            ImageLocation = "https://robohash.org/molestiaemagnamet.png?size=150x150&set=set1",
                            LastName = "Smith"
                        },
                        new
                        {
                            Id = 4,
                            CreateDateTime = new DateTime(2023, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Alice",
                            IdentityUserId = "c806cfae-bda9-47c5-8473-dd52fd056a9b",
                            ImageLocation = "https://robohash.org/deseruntutipsum.png?size=150x150&set=set1",
                            LastName = "Johnson"
                        },
                        new
                        {
                            Id = 5,
                            CreateDateTime = new DateTime(2023, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Bob",
                            IdentityUserId = "9ce89d88-75da-4a80-9b0d-3fe58582b8e2",
                            ImageLocation = "https://robohash.org/quiundedignissimos.png?size=150x150&set=set1",
                            LastName = "Williams"
                        },
                        new
                        {
                            Id = 6,
                            CreateDateTime = new DateTime(2022, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Eve",
                            IdentityUserId = "d224a03d-bf0c-4a05-b728-e3521e45d74d",
                            ImageLocation = "https://robohash.org/hicnihilipsa.png?size=150x150&set=set1",
                            LastName = "Davis"
                        },
                        new
                        {
                            Id = 7,
                            CreateDateTime = new DateTime(2024, 7, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "David",
                            IdentityUserId = "e5c98b1e-5b93-4a7a-9b5a-7a9f9b7b9b7b",
                            ImageLocation = "https://robohash.org/etvoluptatemquas.png?size=150x150&set=set1",
                            LastName = "Brown"
                        },
                        new
                        {
                            Id = 8,
                            CreateDateTime = new DateTime(2023, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Olivia",
                            IdentityUserId = "f6d87a2d-6c84-4b8f-a9e3-8e7a6f5b4c3d",
                            ImageLocation = "https://robohash.org/eiusdoloreea.png?size=150x150&set=set1",
                            LastName = "Taylor"
                        },
                        new
                        {
                            Id = 9,
                            CreateDateTime = new DateTime(2022, 9, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "James",
                            IdentityUserId = "g7e96c3e-7d95-4c9a-b0f4-9c8b7a5d3e2f",
                            ImageLocation = "https://robohash.org/voluptatemautemdolor.png?size=150x150&set=set1",
                            LastName = "Wilson"
                        },
                        new
                        {
                            Id = 10,
                            CreateDateTime = new DateTime(2024, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Sophia",
                            IdentityUserId = "h8f05d4f-8e06-4d0b-a105-ad9c6b4e4d1a",
                            ImageLocation = "https://robohash.org/quoslaboriosamodio.png?size=150x150&set=set1",
                            LastName = "Moore"
                        },
                        new
                        {
                            Id = 11,
                            CreateDateTime = new DateTime(2023, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "William",
                            IdentityUserId = "i9g14e5g-9f17-4e1c-b216-be8d5a3c2b0b",
                            ImageLocation = "https://robohash.org/temporibusdoloreea.png?size=150x150&set=set1",
                            LastName = "Anderson"
                        },
                        new
                        {
                            Id = 12,
                            CreateDateTime = new DateTime(2022, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Mia",
                            IdentityUserId = "j0h23f6h-0a28-4f2d-b327-cf9e4b2d1c0c",
                            ImageLocation = "https://robohash.org/rerumveritatisunde.png?size=150x150&set=set1",
                            LastName = "Thomas"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PulsePitch.Models.ChatRoom", b =>
                {
                    b.HasOne("PulsePitch.Models.UserProfile", "UserOne")
                        .WithMany()
                        .HasForeignKey("UserOneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PulsePitch.Models.UserProfile", "UserTwo")
                        .WithMany()
                        .HasForeignKey("UserTwoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserOne");

                    b.Navigation("UserTwo");
                });

            modelBuilder.Entity("PulsePitch.Models.Formations", b =>
                {
                    b.HasOne("PulsePitch.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("PulsePitch.Models.MatchRequest", b =>
                {
                    b.HasOne("PulsePitch.Models.Team", "AwayTeam")
                        .WithMany()
                        .HasForeignKey("AwayTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PulsePitch.Models.Team", "HomeTeam")
                        .WithMany()
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AwayTeam");

                    b.Navigation("HomeTeam");
                });

            modelBuilder.Entity("PulsePitch.Models.Message", b =>
                {
                    b.HasOne("PulsePitch.Models.ChatRoom", "ChatRoom")
                        .WithMany()
                        .HasForeignKey("ChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PulsePitch.Models.UserProfile", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PulsePitch.Models.UserProfile", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatRoom");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("PulsePitch.Models.PlayerTeam", b =>
                {
                    b.HasOne("PulsePitch.Models.UserProfile", "Player")
                        .WithMany("Teams")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PulsePitch.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("PulsePitch.Models.PlayersInFormation", b =>
                {
                    b.HasOne("PulsePitch.Models.Formations", "Formation")
                        .WithMany("Players")
                        .HasForeignKey("FormationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Formation");
                });

            modelBuilder.Entity("PulsePitch.Models.TeamEvent", b =>
                {
                    b.HasOne("PulsePitch.Models.Events", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PulsePitch.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("PulsePitch.Models.TeamGame", b =>
                {
                    b.HasOne("PulsePitch.Models.Team", "AwayTeam")
                        .WithMany()
                        .HasForeignKey("AwayTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PulsePitch.Models.Team", "HomeTeam")
                        .WithMany()
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AwayTeam");

                    b.Navigation("HomeTeam");
                });

            modelBuilder.Entity("PulsePitch.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId");

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("PulsePitch.Models.Formations", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("PulsePitch.Models.UserProfile", b =>
                {
                    b.Navigation("Teams");
                });
#pragma warning restore 612, 618
        }
    }
}
