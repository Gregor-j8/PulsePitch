// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PulsePitch.Data;

#nullable disable

namespace PulsePitchBackend.Migrations
{
    [DbContext(typeof(PulsePitchDbContext))]
    partial class PulsePitchDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "cb1c88d2-f3be-4c6b-b31f-a5f3e39e274f",
                            Name = "Player",
                            NormalizedName = "PLAYER"
                        },
                        new
                        {
                            Id = "e9b4c5a4-76c6-44b7-88fb-35a0228c9572",
                            Name = "Coach",
                            NormalizedName = "COACH"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ee0e4454-e242-4cc6-b93e-d14601ab35f2",
                            Email = "admina@strator.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEChco+bkXCYtW9YeWCgKkzkKTWclFbrl4B1DSftzxKgfqPvDbY/fAcIeYkOPD3Pvhw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "917fec0c-4a9b-45f2-bb43-b2152a0dbea4",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "d8d76512-74f1-43bb-b1fd-87d3a8aa36df",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "572f706b-7799-4bdc-bf6e-3d61b79f1f65",
                            Email = "john@doe.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAENtwRmavKi55Uy3iTklkjlxm7pwxl+6Il9kWuffnLXSFdSN1e0TVAG0iQu6ch0R1Vw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7ff06333-84e3-4086-ae6d-f07ab96318fe",
                            TwoFactorEnabled = false,
                            UserName = "JohnDoe"
                        },
                        new
                        {
                            Id = "a7d21fac-3b21-454a-a747-075f072d0cf3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d77ee419-95df-4a9c-917f-76703c27f7a0",
                            Email = "jane@smith.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAENU9H/6sU/bAGdb9lltcSxDxB1SGgXf8OfqKKy4jn/TxCrS8yG9fONaoBo8nXysYlQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d3a33b9b-f888-4473-a982-948a3e2a9a64",
                            TwoFactorEnabled = false,
                            UserName = "JaneSmith"
                        },
                        new
                        {
                            Id = "c806cfae-bda9-47c5-8473-dd52fd056a9b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "acf0db07-7e4e-4fcc-a2b9-842d823d4e38",
                            Email = "alice@johnson.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEOBugbV5ys4WsJ66m5cbaf2OnpCmUYchMFyuYcqdcch0GIMaVKLU/ZqHgq8dJPVqyQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2e1aa012-d9bc-4d6e-8df1-0644eee7228e",
                            TwoFactorEnabled = false,
                            UserName = "AliceJohnson"
                        },
                        new
                        {
                            Id = "9ce89d88-75da-4a80-9b0d-3fe58582b8e2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "80b0b71c-dc85-44d9-9e7d-cfdcd7453912",
                            Email = "bob@williams.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEGfyc484GOaYkePexmPjffWsvQZKFLWhghF0ykXelcj61bL4EZdX/JGhk2syYfihmQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "03fb6c50-6248-4239-ab56-bc260020c751",
                            TwoFactorEnabled = false,
                            UserName = "BobWilliams"
                        },
                        new
                        {
                            Id = "d224a03d-bf0c-4a05-b728-e3521e45d74d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e0c7b799-6544-4516-8484-4b94b4dcd7f1",
                            Email = "Eve@Davis.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEDl5rMRlXsnSwjQMWAfgGvLGidzkd4lDaiZk5ZAjifHeVaCVDkXpTQaCCWpYoRjihA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "735c0c30-a98b-40c6-b811-1c40fbc27239",
                            TwoFactorEnabled = false,
                            UserName = "EveDavis"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "e9b4c5a4-76c6-44b7-88fb-35a0228c9572"
                        },
                        new
                        {
                            UserId = "d8d76512-74f1-43bb-b1fd-87d3a8aa36df",
                            RoleId = "cb1c88d2-f3be-4c6b-b31f-a5f3e39e274f"
                        },
                        new
                        {
                            UserId = "a7d21fac-3b21-454a-a747-075f072d0cf3",
                            RoleId = "cb1c88d2-f3be-4c6b-b31f-a5f3e39e274f"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PulsePitch.Models.Events", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Practice"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Film"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Meeting"
                        });
                });

            modelBuilder.Entity("PulsePitch.Models.Formations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Formations");
                });

            modelBuilder.Entity("PulsePitch.Models.PlayerTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("PlayerTeams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PlayerId = 1,
                            TeamId = 1
                        },
                        new
                        {
                            Id = 2,
                            PlayerId = 2,
                            TeamId = 6
                        },
                        new
                        {
                            Id = 3,
                            PlayerId = 2,
                            TeamId = 2
                        },
                        new
                        {
                            Id = 4,
                            PlayerId = 3,
                            TeamId = 4
                        },
                        new
                        {
                            Id = 5,
                            PlayerId = 4,
                            TeamId = 3
                        },
                        new
                        {
                            Id = 6,
                            PlayerId = 5,
                            TeamId = 4
                        },
                        new
                        {
                            Id = 7,
                            PlayerId = 5,
                            TeamId = 6
                        },
                        new
                        {
                            Id = 8,
                            PlayerId = 6,
                            TeamId = 5
                        });
                });

            modelBuilder.Entity("PulsePitch.Models.PlayersInFormation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<int?>("FormationsId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("PositionId")
                        .HasColumnType("integer");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<double>("X")
                        .HasColumnType("double precision");

                    b.Property<double>("Y")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("FormationsId");

                    b.ToTable("PlayersInFormation");
                });

            modelBuilder.Entity("PulsePitch.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CoachId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("JoinCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CoachId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            JoinCode = "EGL123",
                            Name = "Eagles"
                        },
                        new
                        {
                            Id = 2,
                            CoachId = "d8d76512-74f1-43bb-b1fd-87d3a8aa36df",
                            JoinCode = "FLC123",
                            Name = "Falcons"
                        },
                        new
                        {
                            Id = 3,
                            CoachId = "a7d21fac-3b21-454a-a747-075f072d0cf3",
                            JoinCode = "WLV456",
                            Name = "Wolves"
                        },
                        new
                        {
                            Id = 4,
                            CoachId = "a7d21fac-3b21-454a-a747-075f072d0cf3",
                            JoinCode = "SHK789",
                            Name = "Sharks"
                        },
                        new
                        {
                            Id = 5,
                            CoachId = "",
                            JoinCode = "TTN321",
                            Name = "Titans"
                        },
                        new
                        {
                            Id = 6,
                            CoachId = "",
                            JoinCode = "PNR654",
                            Name = "Panthers"
                        });
                });

            modelBuilder.Entity("PulsePitch.Models.TeamEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamEvents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Morning practice session",
                            End = new DateTime(2025, 6, 6, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 1,
                            Start = new DateTime(2025, 6, 6, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 1,
                            Title = "Practice"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Afternoon film",
                            End = new DateTime(2025, 6, 10, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 2,
                            Start = new DateTime(2025, 6, 10, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 2,
                            Title = "film"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Early morning drills",
                            End = new DateTime(2025, 6, 5, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 1,
                            Start = new DateTime(2025, 6, 5, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 3,
                            Title = "Practice"
                        },
                        new
                        {
                            Id = 4,
                            Description = "team meeting",
                            End = new DateTime(2025, 6, 8, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 3,
                            Start = new DateTime(2025, 6, 8, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 4,
                            Title = "meeting"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Tactical strategy session",
                            End = new DateTime(2025, 6, 9, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 2,
                            Start = new DateTime(2025, 6, 9, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 5,
                            Title = "film"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Shooting practice",
                            End = new DateTime(2025, 6, 4, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 1,
                            Start = new DateTime(2025, 6, 4, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 6,
                            Title = "Practice"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Ball control and drills",
                            End = new DateTime(2025, 6, 3, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 1,
                            Start = new DateTime(2025, 6, 3, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 1,
                            Title = "Practice"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Defensive coordination",
                            End = new DateTime(2025, 6, 11, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 3,
                            Start = new DateTime(2025, 6, 11, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 2,
                            Title = "meeting"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Midfield passing accuracy",
                            End = new DateTime(2025, 6, 7, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 1,
                            Start = new DateTime(2025, 6, 7, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 3,
                            Title = "Practice"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Set-piece rehearsals",
                            End = new DateTime(2025, 6, 6, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 2,
                            Start = new DateTime(2025, 6, 6, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 4,
                            Title = "film"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Evening conditioning session",
                            End = new DateTime(2025, 6, 12, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 1,
                            Start = new DateTime(2025, 6, 12, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            TeamId = 5,
                            Title = "Practice"
                        });
                });

            modelBuilder.Entity("PulsePitch.Models.TeamGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AwayTeamId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("integer");

                    b.Property<string>("Result")
                        .HasColumnType("text");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("HomeTeamId");

                    b.ToTable("TeamGames");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AwayTeamId = 4,
                            End = new DateTime(2025, 6, 10, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 1,
                            Result = "TBD",
                            Start = new DateTime(2025, 6, 10, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            AwayTeamId = 2,
                            End = new DateTime(2025, 6, 10, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 1,
                            Result = "2-1",
                            Start = new DateTime(2025, 6, 10, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AwayTeamId = 4,
                            End = new DateTime(2025, 6, 12, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 3,
                            Result = "0-0",
                            Start = new DateTime(2025, 6, 12, 17, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            AwayTeamId = 6,
                            End = new DateTime(2025, 6, 14, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 5,
                            Result = "1-3",
                            Start = new DateTime(2025, 6, 14, 20, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            AwayTeamId = 4,
                            End = new DateTime(2025, 6, 15, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 2,
                            Result = "4-2",
                            Start = new DateTime(2025, 6, 15, 19, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            AwayTeamId = 1,
                            End = new DateTime(2025, 6, 17, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 6,
                            Result = "1-1",
                            Start = new DateTime(2025, 6, 17, 16, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            AwayTeamId = 5,
                            End = new DateTime(2025, 6, 18, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 3,
                            Result = "0-2",
                            Start = new DateTime(2025, 6, 18, 18, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            AwayTeamId = 1,
                            End = new DateTime(2025, 6, 19, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 4,
                            Result = "3-3",
                            Start = new DateTime(2025, 6, 19, 18, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            AwayTeamId = 5,
                            End = new DateTime(2025, 6, 20, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 2,
                            Result = "1-0",
                            Start = new DateTime(2025, 6, 20, 17, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            AwayTeamId = 3,
                            End = new DateTime(2025, 6, 21, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 6,
                            Result = "2-2",
                            Start = new DateTime(2025, 6, 21, 20, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            AwayTeamId = 2,
                            End = new DateTime(2025, 6, 22, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeTeamId = 5,
                            Result = "3-1",
                            Start = new DateTime(2025, 6, 22, 19, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("PulsePitch.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("IdentityUserId")
                        .HasColumnType("text");

                    b.Property<string>("ImageLocation")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<List<string>>("Roles")
                        .HasColumnType("text[]");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDateTime = new DateTime(2022, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Admina",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            ImageLocation = "https://robohash.org/numquamutut.png?size=150x150&set=set1",
                            LastName = "Strator"
                        },
                        new
                        {
                            Id = 2,
                            CreateDateTime = new DateTime(2023, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "John",
                            IdentityUserId = "d8d76512-74f1-43bb-b1fd-87d3a8aa36df",
                            ImageLocation = "https://robohash.org/nisiautemet.png?size=150x150&set=set1",
                            LastName = "Doe"
                        },
                        new
                        {
                            Id = 3,
                            CreateDateTime = new DateTime(2022, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Jane",
                            IdentityUserId = "a7d21fac-3b21-454a-a747-075f072d0cf3",
                            ImageLocation = "https://robohash.org/molestiaemagnamet.png?size=150x150&set=set1",
                            LastName = "Smith"
                        },
                        new
                        {
                            Id = 4,
                            CreateDateTime = new DateTime(2023, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Alice",
                            IdentityUserId = "c806cfae-bda9-47c5-8473-dd52fd056a9b",
                            ImageLocation = "https://robohash.org/deseruntutipsum.png?size=150x150&set=set1",
                            LastName = "Johnson"
                        },
                        new
                        {
                            Id = 5,
                            CreateDateTime = new DateTime(2023, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Bob",
                            IdentityUserId = "9ce89d88-75da-4a80-9b0d-3fe58582b8e2",
                            ImageLocation = "https://robohash.org/quiundedignissimos.png?size=150x150&set=set1",
                            LastName = "Williams"
                        },
                        new
                        {
                            Id = 6,
                            CreateDateTime = new DateTime(2022, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Eve",
                            IdentityUserId = "d224a03d-bf0c-4a05-b728-e3521e45d74d",
                            ImageLocation = "https://robohash.org/hicnihilipsa.png?size=150x150&set=set1",
                            LastName = "Davis"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PulsePitch.Models.Formations", b =>
                {
                    b.HasOne("PulsePitch.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("PulsePitch.Models.PlayerTeam", b =>
                {
                    b.HasOne("PulsePitch.Models.UserProfile", "Player")
                        .WithMany("Teams")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PulsePitch.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("PulsePitch.Models.PlayersInFormation", b =>
                {
                    b.HasOne("PulsePitch.Models.Formations", null)
                        .WithMany("Players")
                        .HasForeignKey("FormationsId");
                });

            modelBuilder.Entity("PulsePitch.Models.TeamEvent", b =>
                {
                    b.HasOne("PulsePitch.Models.Events", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PulsePitch.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("PulsePitch.Models.TeamGame", b =>
                {
                    b.HasOne("PulsePitch.Models.Team", "AwayTeam")
                        .WithMany()
                        .HasForeignKey("AwayTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PulsePitch.Models.Team", "HomeTeam")
                        .WithMany()
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AwayTeam");

                    b.Navigation("HomeTeam");
                });

            modelBuilder.Entity("PulsePitch.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId");

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("PulsePitch.Models.Formations", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("PulsePitch.Models.UserProfile", b =>
                {
                    b.Navigation("Teams");
                });
#pragma warning restore 612, 618
        }
    }
}
